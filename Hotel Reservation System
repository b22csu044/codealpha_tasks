import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Room {
    private int roomNumber;
    private String category;
    private boolean isAvailable;

    public Room(int roomNumber, String category) {
        this.roomNumber = roomNumber;
        this.category = category;
        this.isAvailable = true;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public String getCategory() {
        return category;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }
}

class Reservation {
    private int reservationId;
    private int roomNumber;
    private String guestName;
    private String checkInDate;
    private String checkOutDate;

    public Reservation(int reservationId, int roomNumber, String guestName, String checkInDate, String checkOutDate) {
        this.reservationId = reservationId;
        this.roomNumber = roomNumber;
        this.guestName = guestName;
        this.checkInDate = checkInDate;
        this.checkOutDate = checkOutDate;
    }

	public int getReservationId() {
		// TODO Auto-generated method stub
		return 0;
	}

	public String getRoomNumber() {
		// TODO Auto-generated method stub
		return null;
	}

	public String getGuestName() {
		// TODO Auto-generated method stub
		return null;
	}

	public String getCheckInDate() {
		// TODO Auto-generated method stub
		return null;
	}

	public String getCheckOutDate() {
		// TODO Auto-generated method stub
		return null;
	}

    // Getters and setters
}

class Hotel {
    private List<Room> rooms;
    private List<Reservation> reservations;
    private int nextReservationId;

    public Hotel() {
        rooms = new ArrayList<>();
        reservations = new ArrayList<>();
        nextReservationId = 1;
    }

    public void addRoom(int roomNumber, String category) {
        rooms.add(new Room(roomNumber, category));
    }

    public List<Room> getAvailableRooms() {
        List<Room> availableRooms = new ArrayList<>();
        for (Room room : rooms) {
            if (room.isAvailable()) {
                availableRooms.add(room);
            }
        }
        return availableRooms;
    }

    public boolean makeReservation(int roomNumber, String guestName, String checkInDate, String checkOutDate) {
        for (Room room : rooms) {
            if (room.getRoomNumber() == roomNumber && room.isAvailable()) {
                room.setAvailable(false);
                reservations.add(new Reservation(nextReservationId++, roomNumber, guestName, checkInDate, checkOutDate));
                return true;
            }
        }
        return false; // Room not available or doesn't exist
    }

    public Reservation findReservation(int reservationId) {
        for (Reservation reservation : reservations) {
            if (reservation.getReservationId() == reservationId) {
                return reservation;
            }
        }
        return null; // Reservation not found
    }
}

public class Hotel_Reservation_System {
    public static void main(String[] args) {
        Hotel hotel = new Hotel();
        hotel.addRoom(101, "Standard");
        hotel.addRoom(102, "Deluxe");

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n1. Search available rooms");
            System.out.println("2. Make a reservation");
            System.out.println("3. View booking details");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    List<Room> availableRooms = hotel.getAvailableRooms();
                    if (availableRooms.isEmpty()) {
                        System.out.println("No rooms available.");
                    } else {
                        System.out.println("Available Rooms:");
                        for (Room room : availableRooms) {
                            System.out.println(room.getRoomNumber() + " - " + room.getCategory());
                        }
                    }
                    break;
                case 2:
                    System.out.print("Enter room number: ");
                    int roomNumber = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter guest name: ");
                    String guestName = scanner.nextLine();
                    System.out.print("Enter check-in date: ");
                    String checkInDate = scanner.nextLine();
                    System.out.print("Enter check-out date: ");
                    String checkOutDate = scanner.nextLine();
                    if (hotel.makeReservation(roomNumber, guestName, checkInDate, checkOutDate)) {
                        System.out.println("Reservation successful.");
                    } else {
                        System.out.println("Failed to make reservation. Room not available or doesn't exist.");
                    }
                    break;
                case 3:
                    System.out.print("Enter reservation ID: ");
                    int reservationId = scanner.nextInt();
                    Reservation reservation = hotel.findReservation(reservationId);
                    if (reservation != null) {
                        System.out.println("Reservation Details:");
                        System.out.println("Reservation ID: " + reservation.getReservationId());
                        System.out.println("Room Number: " + reservation.getRoomNumber());
                        System.out.println("Guest Name: " + reservation.getGuestName());
                        System.out.println("Check-in Date: " + reservation.getCheckInDate());
                        System.out.println("Check-out Date: " + reservation.getCheckOutDate());
                    } else {
                        System.out.println("Reservation not found.");
                    }
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
